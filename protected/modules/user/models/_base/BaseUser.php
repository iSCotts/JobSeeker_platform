<?php

/**
 * This is the model base class for the table "tbl_user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "tbl_user" available as properties of the model,
 * followed by relations of table "tbl_user" available as properties of the model.
 *
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property string $phone_number
 * @property string $email
 * @property string $activkey
 * @property integer $createtime
 * @property integer $lastvisit
 * @property integer $superuser
 * @property integer $status
 *
 * @property Account[] $accounts
 * @property InvitedUser[] $invitedUsers
 * @property JobPost[] $jobPosts
 * @property JobResponse[] $jobResponses
 * @property Message[] $messages
 * @property Message[] $messages1
 * @property MessageData[] $messageDatas
 * @property Notifications[] $notifications
 * @property Response[] $responses
 * @property Response[] $responses1
 * @property ResponseData[] $responseDatas
 * @property Review[] $reviews
 * @property Review[] $reviews1
 * @property UserSkill[] $userSkills
 */
abstract class BaseUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'username';
	}

	public function rules() {
		return array(
			array('username, password, email', 'required'),
			array('createtime, lastvisit, superuser, status', 'numerical', 'integerOnly'=>true),
			array('username', 'length', 'max'=>20),
			array('password, email, activkey', 'length', 'max'=>128),
			array('phone_number', 'length', 'max'=>10),
			array('phone_number, activkey, createtime, lastvisit, superuser, status', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, username, password, phone_number, email, activkey, createtime, lastvisit, superuser, status', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'accounts' => array(self::HAS_MANY, 'Account', 'user_id'),
			'invitedUsers' => array(self::HAS_MANY, 'InvitedUser', 'user_id'),
			'jobPosts' => array(self::HAS_MANY, 'JobPost', 'user_id'),
			'jobResponses' => array(self::HAS_MANY, 'JobResponse', 'user_id'),
			'messages' => array(self::HAS_MANY, 'Message', 'sender_id'),
			'messages1' => array(self::HAS_MANY, 'Message', 'receiver_id'),
			'messageDatas' => array(self::HAS_MANY, 'MessageData', 'user_id'),
			'notifications' => array(self::HAS_MANY, 'Notifications', 'receiver_id'),
			'responses' => array(self::HAS_MANY, 'Response', 'sender_id'),
			'responses1' => array(self::HAS_MANY, 'Response', 'receiver_id'),
			'responseDatas' => array(self::HAS_MANY, 'ResponseData', 'user_id'),
			'reviews' => array(self::HAS_MANY, 'Review', 'from_user_id'),
			'reviews1' => array(self::HAS_MANY, 'Review', 'to_user_id'),
			'userSkills' => array(self::HAS_MANY, 'UserSkill', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'username' => Yii::t('app', 'Username'),
			'password' => Yii::t('app', 'Password'),
			'phone_number' => Yii::t('app', 'Phone Number'),
			'email' => Yii::t('app', 'Email'),
			'activkey' => Yii::t('app', 'Activkey'),
			'createtime' => Yii::t('app', 'Createtime'),
			'lastvisit' => Yii::t('app', 'Lastvisit'),
			'superuser' => Yii::t('app', 'Superuser'),
			'status' => Yii::t('app', 'Status'),
			'accounts' => null,
			'invitedUsers' => null,
			'jobPosts' => null,
			'jobResponses' => null,
			'messages' => null,
			'messages1' => null,
			'messageDatas' => null,
			'notifications' => null,
			'responses' => null,
			'responses1' => null,
			'responseDatas' => null,
			'reviews' => null,
			'reviews1' => null,
			'userSkills' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('phone_number', $this->phone_number, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('activkey', $this->activkey, true);
		$criteria->compare('createtime', $this->createtime);
		$criteria->compare('lastvisit', $this->lastvisit);
		$criteria->compare('superuser', $this->superuser);
		$criteria->compare('status', $this->status);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}